buildscript {
    repositories {
        maven { url = 'https://maven.parchmentmc.org' }

        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
}

repositories {
    maven {
        name = 'Fabric'
        url = 'https://maven.fabricmc.net/'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'


archivesBaseName = "${mod_name}-${mod_version}+${minecraft_version}-forge"
version = "${mod_version}"
group = "${group}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"

    runs {
        client {
            property 'mixin.env.disableRefMap', 'true'
            workingDirectory project.file('run')
            arg "--mixin=${mod_id}.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', "${mod_id}"

            mods {
                keepcommandhistory {
                    source sourceSets.main
                }
            }
        }

        server {
            property 'mixin.env.disableRefMap', 'true'
            workingDirectory project.file('runserver')
            arg "--mixin=${mod_id}.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', "${mod_id}"

            mods {
                keepcommandhistory {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', "${mod_id}"

            mods {
                keepcommandhistory {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'keepcommandhistory', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                keepcommandhistory {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation(project(":common")) {
        transitive false
    }

    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

    sourceSets.main.java.srcDirs += (project(':common').sourceSets.main.java.srcDirs)
    sourceSets.main.resources.srcDirs += (project(':common').sourceSets.main.resources.srcDirs)
}

processResources {
    filesMatching("META-INF/mods.toml") {
        expand "version": "${mod_version}",
                "mod_id": "${mod_id}",
                "mod_name": "${mod_name}",
                "mod_author": "${mod_author}",
                "mod_description": "${mod_description}",
                "mod_homepage": "${mod_homepage}",
                "mod_sources": "${mod_sources}",
                "mod_issues": "${mod_issues}"
    }

    filesMatching("pack.mcmeta") {
        expand "mod_name": "${mod_name}"
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_id}",
                "Specification-Vendor"    : "${mod_author}",
                "Specification-Version"   : "${mod_version}",
                "Implementation-Title"    : "${mod_name}",
                "Implementation-Version"  : "${mod_version}",
                "Implementation-Vendor"   : "${mod_author}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${mod_id}.mixins.json",
        ])
    }
}

// Stop remapping common jar if on Forge
project(':common').remapJar.enabled = false

jar.finalizedBy('reobfJar')

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

compileJava.doFirst {
    System.clearProperty("mixin.target.mapid")
}

tasks.withType(JavaCompile) {
    source(project(":common").sourceSets.main.allSource)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
